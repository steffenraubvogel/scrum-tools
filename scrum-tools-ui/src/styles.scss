@use "sass:list";
@use "sass:map";
@use "sass:math";

@import "bootstrap/scss/bootstrap"; /* using @import "bootstrap" would import CSS instead of SCSS */
@import "bootstrap-icons";
@import "themes.scss";

.container {
  /* do not display wider than lg breakpoint */
  max-width: map.get($grid-breakpoints, "lg") !important;
}

main {
  position: relative;
  min-height: 35rem;
}

h1,
h2 {
  margin-top: 0.5em;
  margin-bottom: 1em;
}

.sp-card {
  --sp-card-border-color: rgba(0, 0, 0, 0.1);
  --sp-card-border-width: #{$card-border-width};
  --sp-card-box-shadow-color: rgba(0, 0, 0, 0.05);

  border: var(--sp-card-border-width) solid var(--sp-card-border-color);
  border-radius: $card-border-radius;
  padding: $card-spacer-y $card-spacer-x;
  box-shadow: var(--sp-card-box-shadow-color) 0px 1px 2px;
  height: 100%;

  h2 {
    margin-top: 0;
  }
}

.sp-error-page h1 {
  text-align: center;
}

.sp-emoji {
  font-size: 200%;
  vertical-align: middle;
  margin-left: 2rem;
}

.sp-bar-chart-votes-container,
.sp-radial-chart-votes-container {
  --sp-chart-color-sat: 60%;
  --sp-chart-color-li: 50%;
  $guesses: 1, 2, 3, 5, 8, 13, 21;
  $guessColorStart: 180;
  $guessColorEnd: 270;
  @each $guess in $guesses {
    --sp-chart-color-#{$guess}: hsl(
      #{$guessColorStart + math.div((list.index($guesses, $guess) - 1) * ($guessColorEnd - $guessColorStart), list.length($guesses) - 1)},
      var(--sp-chart-color-sat),
      var(--sp-chart-color-li)
    );
  }
  --sp-chart-color-abstained: #{$gray-500};
}

.sp-when-light {
  // default is light theme
  display: initial;
}
.sp-when-dark {
  display: none;
}
